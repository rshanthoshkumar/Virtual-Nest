#include <ESP8266WiFi.h>
#include <PubSubClient.h>

const int trigPin = 12;
const int echoPin = 14;
const int relayPin = 4;


#define SOUND_VELOCITY 0.034
#define CM_TO_INCH 0.393701

long duration;
float distanceCm;
float distanceInch;

// Update these with values suitable for your network.
const char* ssid = "Wifi name";
const char* password = "Wifi password";
const char* mqtt_server = "broker.mqtt-dashboard.com";

const int ldrPin = A0; // LDR sensor connected to analog pin A0
int ldrValue = 0;

WiFiClient espClient;
PubSubClient client(espClient);
unsigned long lastMsg = 0;
#define MSG_BUFFER_SIZE (50)
char msg[MSG_BUFFER_SIZE];
int value=0;

void setup_wifi() {
  delay(10);
  // Connect to WiFi network
  Serial.println();
  Serial.print("Connecting to ");
  Serial.println(ssid);
  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("");
  Serial.println("WiFi connected");
  Serial.println("IP address: ");
  Serial.println(WiFi.localIP());
}

void callback(char* topic, byte* payload, unsigned int length) {
  Serial.print("Message arrived [");
  Serial.print(topic);
  Serial.print("] ");
  for (int i = 0; i < length; i++) {
    Serial.print((char)payload[i]);
  }
  Serial.println();

  // Control the relay based on the MQTT message
  if ((char)payload[0] == '1') {
    Serial.println("Turning on the relay");
    digitalWrite(relayPin, HIGH); // Turn on the relay
  } else if ((char)payload[0] == '0') {
    Serial.println("Turning off the relay");
    digitalWrite(relayPin, LOW); // Turn off the relay
  }
}

void reconnect() {
  // Reconnect to MQTT broker
  while (!client.connected()) {
    Serial.print("Attempting MQTT connection...");
    String clientId = "ESP8266Client-";
    clientId += String(random(0xffff), HEX);
    if (client.connect(clientId.c_str())) {
      Serial.println("connected");
      client.subscribe("virtualnest");
    } else {
      Serial.print("failed, rc=");
      Serial.print(client.state());
      Serial.println(" try again in 5 seconds");
      delay(5000);
    }
  }
}

void setup() {
  pinMode(relayPin, OUTPUT);    // Initialize the BUILTIN_LED pin as an output
  Serial.begin(115200); 
  pinMode(trigPin, OUTPUT); 
  pinMode(echoPin, INPUT); 
  setup_wifi();
  client.setServer(mqtt_server, 1883);
  client.setCallback(callback);
}

void loop() {
  // Read LDR value
  

  // Reconnect to MQTT broker if necessary
  if (!client.connected()) {
    reconnect();
  }
  client.loop();
}
